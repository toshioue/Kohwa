import { Component, Input, ViewChild, Pipe } from '@angular/core';
import * as go from "gojs";
import { DomSanitizer } from '@angular/platform-browser';
import { DimensionVm, ChartType, BandVm, NodeType, ChartStructureVm, ProfileStructureVm, DataElementVm, Operator, ConnectorType, ConnectorVm, EntityVm, ConnectorLinkVm } from '../index';
import { BIService } from '../../services/bi-chart-viewer';
var cloneDeep = require('lodash.clonedeep');
var newProfileText = "New Profile";
var newBandText = "Band 1";
var ProfileDesignerComponent = /** @class */ (function () {
    function ProfileDesignerComponent(pService) {
        this.pService = pService;
        this.edittableLink = false;
        this.conType = "PreserveLeft";
        this.listOfSwapChoices = new Array();
        this.listOfRightChoices = new Array();
        this.listOfLeftChoices = new Array();
        this.connectorTypes = new Array();
        this.leftEntityFields = new Array();
        this.rightEntityFields = new Array();
        this.swapEntityFields = new Array();
        this.filteredEntities = new Array();
        this.selectedGoCharts = new Array();
        this.profilesObj = new Array();
        this.profiles = new Array();
        this.profileExists = false;
        // chart data from new chart dialog
        this.chartName = new ChartStructureVm;
        this.types = new Array();
        // entity data from new chart dialog
        this.clonedEntities = new Array();
        this.selectedEntity = new Array();
        this.entities = new Array();
        this.selectedEntities = new Array();
        // for entity diagram
        this.links = new Array();
        this.model = new go.GraphLinksModel([]);
        this.entityDiagrams = new Array();
        // operator enum converted to string
        this.ops = new Array();
        // dropdown list for new field
        this.operators = new Array();
        this.allFields = new Array();
        // dropdown for sort order
        this.fields = new Array();
        // dropdown options for order by
        this.orders = new Array();
        // converting node type enum to string
        this.nodeTypes = new Array();
        // sets the list of nodes for new field 
        this.nTypes = new Array();
        // list of all dimensions created from entity diagram
        this.dimensions = new Array();
        // new dimension added from new field dialog
        this.addedEntDim = new DimensionVm();
    }
    ProfileDesignerComponent.prototype.ngOnDestroy = function () {
        console.log("Destroyed");
    };
    ProfileDesignerComponent.prototype.showDetails = function (node) {
        // onclick of node diagram
        var _this = this;
        this.node = node;
        this.fields = [];
        if (node) {
            var kkey = node.key;
            this.dimensions.forEach(function (dm) {
                if (kkey === dm.entity) {
                    _this.newEntDim = dm;
                    _this.fieldDefault = { label: "Select", value: null };
                    dm.dimensions.forEach(function (f) {
                        _this.field = { label: f.entity, value: f.entity };
                        _this.fields.push(_this.field);
                    });
                    _this.fields.unshift(_this.fieldDefault);
                    _this.orders = [
                        { label: 'Ascending', value: 'Asc' },
                        { label: 'Descending', value: 'Desc' }
                    ];
                }
            });
            this.loadLinkTypes();
        }
    };
    ProfileDesignerComponent.prototype.onModelChanged = function (c) {
        // who knows what might have changed in the selected node and data?
        this.showDetails(this.node);
    };
    ProfileDesignerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.url = this.pService.url;
        Object.keys(Operator).forEach(function (key) {
            if (!isNaN(Number(Operator[key])))
                _this.ops.push({ label: key, value: key });
        });
        this.addedEntDim.operation = this.ops[0].value;
        this.getProfileStructureInit();
        Object.keys(ChartType).forEach(function (key) {
            if (!isNaN(Number(ChartType[key])))
                _this.types.push({ label: key, value: key });
        });
        this.pService.GetEntities().subscribe((function (k) {
            _this.entitiesObj = k;
            _this.entitiesObj.forEach(function (ent) {
                var entityNode = {
                    "label": ent.name,
                    "data": ent,
                    "icon": "ui-icon-functions",
                    "children": []
                };
                _this.entities.push(entityNode);
                ent.fields.forEach(function (field) {
                    var fieldNode = {
                        "label": field.name,
                        "data": field,
                        "parent": _this.entities[_this.entities.length - 1],
                        "icon": "ui-icon-power-input",
                        "children": []
                    };
                    _this.allField = { label: ent.name + "." + field.name, value: field };
                    _this.allFields.push(_this.allField);
                    entityNode.children.push(fieldNode);
                });
            });
            _this.clonedEntities = cloneDeep(_this.entities);
        }), function (error) { console.log(error); }, function () {
        });
    };
    ProfileDesignerComponent.prototype.loadProfileOnTab = function (event) {
        if (this.profileIsSelected) {
            if (event.index === 1 && event.index !== 0) {
                this.previewSet = true;
                this.pService.loadProfile(this.selectedNode.label);
            }
            else {
                this.previewSet = false;
            }
        }
    };
    ProfileDesignerComponent.prototype.getProfileStructureInit = function () {
        var _this = this;
        this.pService.GetProfileStructure().subscribe((function (p) {
            if (p) {
                _this.profilesObj = p;
                _this.profilesObj.forEach(function (profile) {
                    var profileNode = {
                        "label": profile.title,
                        "data": profile,
                        "icon": "ui-icon-person",
                        "expanded": true,
                        "children": []
                    };
                    _this.profiles.push(profileNode);
                    profile.bands.forEach(function (band) {
                        var bandNode = {
                            "label": "Band " + (profile.bands.indexOf(band) + 1),
                            "data": band,
                            "icon": "ui-icon-format-bold",
                            "expanded": true,
                            "children": []
                        };
                        profileNode.children.push(bandNode);
                        band.charts.forEach(function (c) {
                            var icon;
                            if (c.type.toString() === "Pie") {
                                icon = "ui-icon-pie-chart";
                            }
                            if (c.type.toString() === "Doughnut") {
                                icon = "ui-icon-data-usage";
                            }
                            if (c.type.toString() === "Label") {
                                icon = "ui-icon-font-download";
                            }
                            if (c.type.toString() === "Line") {
                                icon = "ui-icon-trending-up";
                            }
                            if (c.type.toString() === "Table") {
                                icon = "ui-icon-grid-on";
                            }
                            if (c.type.toString() === "Bar") {
                                icon = "ui-icon-insert-chart";
                            }
                            var chartNode = {
                                "label": c.title,
                                "data": c,
                                "icon": icon,
                                "expanded": true
                            };
                            bandNode.children.push(chartNode);
                        });
                    });
                });
                _this.profileReady = true;
            }
        }));
    };
    ProfileDesignerComponent.prototype.nodeSelect = function (node) {
        var _this = this;
        this.nodeSelected = true;
        if (this.selectedNode.parent && this.selectedNode.children) {
            console.log("Band Selected");
            this.bandIsSelected = true;
            this.profileIsSelected = false;
            this.chartIsSelected = false;
            if (this.previewSet) {
                this.pService.loadProfile(this.selectedNode.parent.label);
            }
        }
        if (this.selectedNode.parent && !this.selectedNode.children) {
            console.log("Chart Selected");
            this.bandIsSelected = false;
            this.profileIsSelected = false;
            this.chartIsSelected = true;
            if (this.previewSet) {
                this.pService.loadProfile(this.selectedNode.parent.parent.label);
            }
            this.entityDiagrams = [];
            this.dimensions = [];
            var ch = this.selectedNode.data;
            ch.dimensions.forEach(function (dm) {
                var entDgm = { key: dm.entity, items: [], isSelected: false };
                dm.dimensions.forEach(function (dd) {
                    entDgm.items.push({ name: dd.entity, iskey: false, figure: "Decision", color: "#333333" });
                });
                _this.entityDiagrams.push(entDgm);
                _this.dimensions.push(dm);
            });
            this.chartName = ch;
            this.selectedNode.label;
            this.viewChartDesigner();
        }
        if (!this.selectedNode.parent && this.selectedNode.children) {
            console.log("Profile Selected");
            this.bandIsSelected = false;
            this.profileIsSelected = true;
            this.chartIsSelected = false;
            if (this.previewSet) {
                this.pService.loadProfile(this.selectedNode.label);
            }
        }
        if (this.firstNode && (this.copyInitiated || this.cutInitiated)) {
            this.secondNode = this.selectedNode;
        }
        else {
            this.firstNode = this.selectedNode;
        }
        if (this.copyInitiated || this.cutInitiated) {
            this.secondNode = this.selectedNode;
            if (this.selectedNode.parent && this.selectedNode.children) {
                this.secondNodeType = "band";
            }
            if (this.selectedNode.parent && !this.selectedNode.children) {
                this.secondNodeType = "chart";
            }
            if (!this.selectedNode.parent && this.selectedNode.children) {
                this.secondNodeType = "profile";
            }
            if ((this.firstNodeType == "band" && this.secondNodeType == "profile") || (this.firstNodeType == "chart" && this.secondNodeType == "band")) {
                this.copyValid = true;
            }
            else {
                this.copyValid = false;
            }
        }
    };
    ProfileDesignerComponent.prototype.nodeUnselect = function (event) {
        this.nodeSelected = false;
    };
    ProfileDesignerComponent.prototype.blur = function () {
        this.nodeSelected = false;
    };
    ProfileDesignerComponent.prototype.copy = function () {
        if (this.initNewProfile || this.profileReady) {
            if (this.selectedNode.parent && this.selectedNode.children) {
                this.firstNodeType = "band";
            }
            if (this.selectedNode.parent && !this.selectedNode.children) {
                this.firstNodeType = "chart";
            }
            if (!this.selectedNode.parent && this.selectedNode.children) {
                this.firstNodeType = "profile";
                this.firstNode = null;
            }
            this.cloneNode = cloneDeep(this.firstNode);
            this.copyInitiated = true;
        }
    };
    ProfileDesignerComponent.prototype.cut = function () {
        if (this.initNewProfile || this.profileReady) {
            if (this.selectedNode.parent && this.selectedNode.children) {
                this.firstNodeType = "band";
            }
            if (this.selectedNode.parent && !this.selectedNode.children) {
                this.firstNodeType = "chart";
            }
            if (!this.selectedNode.parent && this.selectedNode.children) {
                this.firstNodeType = "profile";
                this.firstNode = null;
            }
            this.cloneNode = cloneDeep(this.firstNode);
            this.cutInitiated = true;
        }
    };
    ProfileDesignerComponent.prototype.paste = function () {
        if (this.copyInitiated && this.copyValid) {
            this.secondNode.children.push(this.cloneNode);
            if (this.firstNodeType === "chart" && this.secondNodeType === "band") {
                this.selectedNode.data.charts.push(this.cloneNode.data);
            }
            if (this.firstNodeType === "band" && this.secondNodeType === "profile") {
                this.secondNode.data.bands.push(this.cloneNode.data);
            }
            this.copyInitiated = false;
            this.copyValid = false;
        }
        if (this.cutInitiated) {
            this.secondNode.children.push(this.cloneNode);
            if (this.firstNodeType === "chart" && this.secondNodeType === "band") {
                this.firstNode.parent.data.charts.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
                this.firstNode.parent.children.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
                this.selectedNode.data.charts.push(this.cloneNode.data);
            }
            if (this.firstNodeType === "band" && this.secondNodeType === "profile") {
                this.selectedNode.parent.data.bands.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
                this.selectedNode.parent.children.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
                this.secondNode.data.bands.push(this.cloneNode.data);
            }
            this.cutInitiated = false;
        }
    };
    ProfileDesignerComponent.prototype.createNewChart = function () {
        if (this.addNewEntity) {
            this.NewChartHeader = "Edit Chart";
        }
        else {
            this.NewChartHeader = "New Chart";
        }
        this.chartName = new ChartStructureVm();
        this.chartName.dimensions = [];
        this.showNewChartModal = true;
        if (this.clonedEntities.length > 0) {
            this.entities = cloneDeep(this.clonedEntities);
        }
    };
    ProfileDesignerComponent.prototype.editChart = function () {
        var _this = this;
        this.showNewChartModal = true;
        this.addNewEntity = true;
        if (this.addNewEntity) {
            this.NewChartHeader = "Edit Chart";
        }
        else {
            this.NewChartHeader = "New Chart";
        }
        var ct = this.selectedNode.data.type;
        if (ct === 0) {
            this.chartType = "Bar";
        }
        else if (ct === 1) {
            this.chartType = "Pie";
        }
        else if (ct === 2) {
            this.chartType = "Doughnut";
        }
        else if (ct === 3) {
            this.chartType = "Label";
        }
        else if (ct === 4) {
            this.chartType = "Line";
        }
        else if (ct === 5) {
            this.chartType = "Table";
        }
        else {
            this.chartType = this.selectedNode.data.type;
        }
        this.selectedNode.data.dimensions.forEach(function (entdim) {
            var res = _this.entities.filter(function (et) { return et.label === entdim.entity; });
            var entTreenode = res[0];
            entTreenode.expanded = true;
            entdim.dimensions.forEach(function (fieldDim) {
                _this.entities.forEach(function (ent) {
                    if (ent.label === fieldDim.parent.entity) {
                        var res = ent.children.filter(function (et) { return et.label === fieldDim.entity; });
                        var fieldTreenode = res[0];
                        _this.selectedEntity.push(fieldTreenode);
                    }
                });
            });
        });
    };
    ProfileDesignerComponent.prototype.createProfile = function () {
        var newProf = new ProfileStructureVm();
        newProf.title = newProfileText;
        var newArrayBand = new Array();
        var newBand = new BandVm();
        newBand.row = 0;
        var newChart = new ChartStructureVm();
        newProf.bands.push(newBand);
        this.profileNode = {
            "label": newProf.title,
            "data": newProf,
            "icon": "ui-icon-person",
            "expanded": true,
            "children": [{
                    "label": newBandText,
                    "data": newBand,
                    "icon": "ui-icon-format-bold",
                    "children": []
                }]
        };
        this.profiles.push(this.profileNode);
        this.initNewProfile = !this.initNewProfile;
    };
    ProfileDesignerComponent.prototype.createNewBand = function () {
        var newBand = new BandVm();
        var newChart = new ChartStructureVm();
        var nodeChildren = this.selectedNode.children;
        newBand.row = nodeChildren.length;
        this.selectedNode.data.bands.push(newBand);
        var tr = {
            "label": "Band " + (nodeChildren.length + 1),
            "icon": "ui-icon-format-bold",
            "expanded": true,
            "data": newBand,
            children: []
        };
        this.selectedNode.children.push(tr);
    };
    ProfileDesignerComponent.prototype.addChartToBand = function () {
        var icon = "";
        if (this.chartType.toString() === "Pie") {
            icon = "ui-icon-pie-chart";
        }
        if (this.chartType.toString() === "Doughnut") {
            icon = "ui-icon-data-usage";
        }
        if (this.chartType.toString() === "Label") {
            icon = "ui-icon-font-download";
        }
        if (this.chartType.toString() === "Line") {
            icon = "ui-icon-trending-up";
        }
        if (this.chartType.toString() === "Table") {
            icon = "ui-icon-grid-on";
        }
        if (this.chartType.toString() === "Bar") {
            icon = "ui-icon-insert-chart";
        }
        var newChart = new ChartStructureVm();
        newChart.title = this.chartName.title;
        var chartT = ChartType[this.chartType];
        newChart.type = chartT;
        newChart.dimensions = [];
        (_a = newChart.dimensions).push.apply(_a, this.chartName.dimensions);
        var nodeChildren = this.selectedNode.children;
        this.selectedNode.data.charts.push(newChart);
        var tr = {
            "label": "" + this.chartName.title,
            "expanded": true,
            "icon": icon,
            "data": newChart,
        };
        this.selectedNode.children.push(tr);
        this.chartName.title = "";
        this.chartType = "Select";
        var _a;
    };
    ProfileDesignerComponent.prototype.createNew = function () {
        this.nodeSelected = true;
        if (this.profileIsSelected) {
            console.log("Creating band in " + this.selectedNode.label);
            this.createNewBand();
        }
        if (this.bandIsSelected) {
            this.createNewChart();
        }
        if (this.chartIsSelected) {
            this.editChart();
        }
    };
    ProfileDesignerComponent.prototype.saveProfile = function () {
        var _this = this;
        try {
            if (this.selectedNode.label !== newProfileText) {
                profileStructure = this.selectedNode.data;
                this.profilesObj.forEach(function (p) {
                    if (_this.selectedNode.label === p.title && p !== profileStructure) {
                        console.log("Profile already exists");
                        profileStructure.title = newProfileText;
                        _this.selectedNode.label = newProfileText;
                        _this.profileExists = true;
                    }
                    else {
                        profileStructure.title = _this.selectedNode.label;
                        _this.profileExists = false;
                    }
                });
            }
            if (this.profileIsSelected && this.selectedNode.label !== newProfileText && this.selectedNode.label !== "" && this.profileExists === false) {
                console.log(this.selectedNode);
                this.initNewProfile = false;
                console.log("Selected node " + this.selectedNode.label);
                var profileStructure = new ProfileStructureVm();
                profileStructure = this.selectedNode.data;
                profileStructure.title = this.selectedNode.label;
                this.pService.AddProfileStructure(profileStructure).subscribe(function (res) {
                    _this.profiles = [];
                    _this.profilesObj = res;
                    _this.profilesObj.forEach(function (profile) {
                        var profileNode = {
                            "label": profile.title,
                            "data": profile,
                            "icon": "ui-icon-person",
                            "expanded": true,
                            "children": []
                        };
                        _this.profiles.push(profileNode);
                        profile.bands.forEach(function (band) {
                            var bandNode = {
                                "label": "Band " + (profile.bands.indexOf(band) + 1),
                                "data": band,
                                "icon": "ui-icon-format-bold",
                                "expanded": true,
                                "children": []
                            };
                            profileNode.children.push(bandNode);
                            band.charts.forEach(function (c) {
                                var icon;
                                if (c.type.toString() === "Pie") {
                                    icon = "ui-icon-pie-chart";
                                }
                                if (c.type.toString() === "Doughnut") {
                                    icon = "ui-icon-data-usage";
                                }
                                if (c.type.toString() === "Label") {
                                    icon = "ui-icon-font-download";
                                }
                                if (c.type.toString() === "Line") {
                                    icon = "ui-icon-trending-up";
                                }
                                if (c.type.toString() === "Table") {
                                    icon = "ui-icon-grid-on";
                                }
                                if (c.type.toString() === "Bar") {
                                    icon = "ui-icon-insert-chart";
                                }
                                var chartNode = {
                                    "label": c.title,
                                    "data": c,
                                    "expanded": true,
                                    "icon": icon
                                };
                                bandNode.children.push(chartNode);
                            });
                        });
                    });
                    _this.profileReady = true;
                }, function (err) { return console.log(err); });
            }
        }
        catch (e) { }
    };
    ProfileDesignerComponent.prototype.deleteNode = function () {
        if (this.profileIsSelected) {
            this.deleteProfile();
        }
        if (this.bandIsSelected) {
            this.deleteBand();
        }
        if (this.chartIsSelected) {
            this.deleteChart();
        }
    };
    ProfileDesignerComponent.prototype.deleteProfile = function () {
        var _this = this;
        if (this.profileIsSelected) {
            console.log("Delete profile?");
            var profileStructure = new ProfileStructureVm();
            profileStructure.title = this.selectedNode.label;
            this.pService.deleteProfileStructure(profileStructure.title).subscribe(function (res) {
                _this.profilesObj = [];
                _this.profiles = [];
                _this.profilesObj = res;
                _this.profilesObj.forEach(function (profile) {
                    var profileNode = {
                        "label": profile.title,
                        "data": profile,
                        "icon": "ui-icon-person",
                        "expanded": true,
                        "children": []
                    };
                    _this.profiles.push(profileNode);
                    profile.bands.forEach(function (band) {
                        var bandNode = {
                            "label": "Band " + (profile.bands.indexOf(band) + 1),
                            "data": band,
                            "icon": "ui-icon-format-bold",
                            "expanded": true,
                            "children": []
                        };
                        profileNode.children.push(bandNode);
                        band.charts.forEach(function (c) {
                            var icon;
                            if (c.type.toString() === "Pie") {
                                icon = "ui-icon-pie-chart";
                            }
                            if (c.type.toString() === "Doughnut") {
                                icon = "ui-icon-data-usage";
                            }
                            if (c.type.toString() === "Label") {
                                icon = "ui-icon-font-download";
                            }
                            if (c.type.toString() === "Line") {
                                icon = "ui-icon-trending-up";
                            }
                            if (c.type.toString() === "Table") {
                                icon = "ui-icon-grid-on";
                            }
                            if (c.type.toString() === "Bar") {
                                icon = "ui-icon-insert-chart";
                            }
                            var chartNode = {
                                "label": c.title,
                                "data": c,
                                "expanded": true,
                                "icon": icon
                            };
                            bandNode.children.push(chartNode);
                        });
                    });
                });
                _this.profileReady = true;
            });
            console.log("Deleted profile " + profileStructure.title);
            this.initNewProfile = false;
        }
        else {
            console.log("Select a profile");
            return;
        }
    };
    ProfileDesignerComponent.prototype.deleteBand = function () {
        if (this.bandIsSelected) {
            this.selectedNode.parent.data.bands.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
            this.selectedNode.parent.children.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
        }
    };
    ProfileDesignerComponent.prototype.deleteChart = function () {
        if (this.chartIsSelected) {
            //delete from server
            console.log("Delete chart?");
            this.selectedNode.parent.data.charts.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
            this.selectedNode.parent.children.splice(this.firstNode.parent.children.indexOf(this.firstNode), 1);
        }
        else {
            console.log("Select a chart");
            return;
        }
    };
    ProfileDesignerComponent.prototype.makeChart = function () {
        var _this = this;
        if (this.chartName.title && this.chartType.toString() !== "Select" && this.selectedEntity.length > 0) {
            this.entityDiagrams = [];
            this.dimensions = [];
            this.entitiesnode = new Array();
            this.selectedEntity.forEach(function (ent) {
                if (ent.parent) {
                    var parentname = ent.parent.label;
                    var res = _this.entitiesnode.filter(function (en) {
                        return en.parent_.label === parentname;
                    });
                    if (res.length === 1) {
                        res[0].children_.push(ent);
                    }
                    else {
                        var f = { parent_: ent.parent, children_: new Array() };
                        f.children_.push(ent);
                        _this.entitiesnode.push(f);
                    }
                }
                else {
                    var res2 = _this.entitiesnode.filter(function (en) {
                        return en.parent_.label === ent.label;
                    });
                    if (res2.length === 1) { }
                    else {
                        var e = { parent_: ent, children_: new Array() };
                        _this.entitiesnode.push(e);
                    }
                }
            });
            this.chartName.dimensions = new Array();
            this.entitiesnode.forEach(function (entt) {
                var entDim = new DimensionVm();
                var par = new DimensionVm();
                entDim.dimensions = new Array();
                entDim.entity = entt.parent_.label;
                par.entity = entt.parent_.label;
                var dataEl = new DataElementVm();
                dataEl.name = entt.parent_.data.name;
                dataEl.friendlyName = entt.parent_.data.friendlyName;
                entDim.dataElement = dataEl;
                par.dataElement = dataEl;
                Object.keys(NodeType).forEach(function (key) {
                    if (!isNaN(Number(NodeType[key])))
                        _this.nodeTypes.push({ label: key, value: key });
                });
                entDim.nodeType = _this.nodeTypes[0].value;
                par.nodeType = _this.nodeTypes[0].value;
                _this.dimensions.push(entDim);
                entt.children_.forEach(function (ch) {
                    var fieldDim = new DimensionVm();
                    fieldDim.entity = ch.label;
                    var dataEl = new DataElementVm();
                    dataEl.name = ch.data.name;
                    dataEl.friendlyName = ch.data.friendlyName;
                    dataEl.type = ch.data.type;
                    fieldDim.dataElement = dataEl;
                    fieldDim.nodeType = _this.nodeTypes[1].value;
                    fieldDim.parent = par;
                    entDim.dimensions.push(fieldDim);
                });
                _this.chartName.dimensions.push(entDim);
            });
            this.selectedEntities = [];
            this.entitiesnode.forEach(function (se) {
                _this.selectedEntities.push(se.parent_.data.name);
            });
            this.chartName.dimensions.forEach(function (dm) {
                var entDgm = { key: dm.dataElement.name, items: [] };
                dm.dimensions.forEach(function (dd) {
                    entDgm.items.push({ name: dd.dataElement.name, iskey: false, figure: "Decision", color: "#333333" });
                });
                _this.entityDiagrams.push(entDgm);
            });
            this.showNewChartModal = false;
            this.selectedEntity = [];
            this.selectedEntities = [];
            this.addChartToBand();
        }
    };
    ProfileDesignerComponent.prototype.onNewChart_EntityHide = function () {
        this.addNewEntity = false;
        this.selectedEntities = [];
        this.selectedEntity = [];
        this.chartType = "Select";
    };
    ProfileDesignerComponent.prototype.saveEdittedChart = function () {
        var _this = this;
        if (this.selectedEntity.length > 0) {
            this.addNewEntity = false;
            this.showNewChartModal = false;
            this.entityDiagrams = [];
            this.dimensions = [];
            this.chartName.dimensions = [];
            this.entitiesnode = new Array();
            this.selectedEntity.forEach(function (ent) {
                if (ent.parent) {
                    var parentname = ent.parent.label;
                    var res = _this.entitiesnode.filter(function (en) {
                        return en.parent_.label === parentname;
                    });
                    if (res.length === 1) {
                        res[0].children_.push(ent);
                    }
                    else {
                        var f = { parent_: ent.parent, children_: new Array() };
                        f.children_.push(ent);
                        _this.entitiesnode.push(f);
                    }
                }
                else {
                    var res2 = _this.entitiesnode.filter(function (en) {
                        return en.parent_.label === ent.label;
                    });
                    if (res2.length === 1) { }
                    else {
                        var e = { parent_: ent, children_: new Array() };
                        _this.entitiesnode.push(e);
                    }
                }
            });
            this.entitiesnode.forEach(function (entt) {
                var entDim = new DimensionVm();
                var par = new DimensionVm();
                entDim.dimensions = new Array();
                entDim.entity = entt.parent_.label;
                par.entity = entt.parent_.label;
                var dataEl = new DataElementVm();
                dataEl.name = entt.parent_.data.name;
                dataEl.friendlyName = entt.parent_.data.friendlyName;
                entDim.dataElement = dataEl;
                par.dataElement = dataEl;
                Object.keys(NodeType).forEach(function (key) {
                    if (!isNaN(Number(NodeType[key])))
                        _this.nodeTypes.push({ label: key, value: key });
                });
                entDim.nodeType = _this.nodeTypes[0].value;
                par.nodeType = _this.nodeTypes[0].value;
                _this.dimensions.push(entDim);
                entt.children_.forEach(function (ch) {
                    var fieldDim = new DimensionVm();
                    fieldDim.entity = ch.label;
                    var dataEl = new DataElementVm();
                    dataEl.name = ch.data.name;
                    dataEl.friendlyName = ch.data.friendlyName;
                    dataEl.type = ch.data.type;
                    fieldDim.dataElement = dataEl;
                    fieldDim.nodeType = _this.nodeTypes[1].value;
                    fieldDim.parent = par;
                    entDim.dimensions.push(fieldDim);
                });
                _this.chartName.dimensions.push(entDim);
            });
            this.chartName.dimensions.forEach(function (dm) {
                var entDgm = { key: dm.dataElement.name, items: [] };
                dm.dimensions.forEach(function (dd) {
                    entDgm.items.push({ name: dd.dataElement.name, iskey: false, figure: "Decision", color: "#333333" });
                });
                _this.entityDiagrams.push(entDgm);
            });
            this.selectedEntities = [];
            this.addNewEntity = false;
            this.selectedNode.label = this.chartName.title;
            this.selectedNode.icon = icon;
            var icon = "";
            if (this.chartType.toString() === "Pie") {
                icon = "ui-icon-pie-chart";
            }
            if (this.chartType.toString() === "Doughnut") {
                icon = "ui-icon-data-usage";
            }
            if (this.chartType.toString() === "Label") {
                icon = "ui-icon-font-download";
            }
            if (this.chartType.toString() === "Line") {
                icon = "ui-icon-trending-up";
            }
            if (this.chartType.toString() === "Table") {
                icon = "ui-icon-grid-on";
            }
            if (this.chartType.toString() === "Bar") {
                icon = "ui-icon-insert-chart";
            }
            var chartT = ChartType[this.chartType];
            this.chartName.type = chartT;
            this.selectedNode.icon = icon;
        }
    };
    ProfileDesignerComponent.prototype.viewChartDesigner = function () {
        var _this = this;
        this.makeChartInit = true;
        this.selectedEntities = [];
        this.links = [];
        this.chartName.dimensions.forEach(function (d) {
            _this.selectedEntities.push(d.dataElement.name);
        });
        this.pService.GetConnections(this.selectedEntities).subscribe((function (k) {
            _this.links = new Array();
            var addedLinks = _this.chartName.links.filter(function (a) {
                return a.isAdded;
            });
            _this.chartName.links = k;
            (_a = _this.chartName.links).push.apply(_a, addedLinks);
            k.forEach(function (con) {
                _this.links.push({ from: con.left.name, to: con.right.name, text: "1", toText: "0..N" });
            });
            _this.model = new go.GraphLinksModel(_this.entityDiagrams, _this.links);
            var _a;
        }), function (error) {
            console.log(error);
        }, function () {
            console.log('Get Connections complete');
        });
        this.selectedEntities = [];
    };
    ProfileDesignerComponent.prototype.loadLinkTypes = function () {
        this.nTypes = [
            { label: 'AvgLeaf', value: 'AvgLeaf' },
            { label: 'SumLeaf', value: 'SumLeaf' },
            { label: 'CountLeaf', value: 'CountLeaf' },
        ];
    };
    ProfileDesignerComponent.prototype.editField = function (dim) {
        this.operators = [
            { label: 'None', value: 'None' },
            { label: '+', value: 'Add' },
            { label: 'x', value: 'Multiply' },
            { label: '-', value: 'Subtract' },
            { label: '/', value: 'Divide' },
        ];
        this.editFieldSelect = true;
        this.showNewFieldModal = true;
        this.addedEntDim = dim;
        this.operand1 = this.addedEntDim.dataElement.parent.name + "." + this.addedEntDim.dataElement.name;
        if (this.addedEntDim.operand.name) {
            if (this.addedEntDim.operand.name.toString() !== "") {
                this.operand2 = this.addedEntDim.operand.parent.name + "." + this.addedEntDim.operand.name;
            }
        }
        else {
            this.operand2 = "Operand 2";
            this.newOperandVisible = false;
        }
    };
    ProfileDesignerComponent.prototype.deleteField = function (dim) {
        try {
            this.newEntDim.dimensions.splice(this.newEntDim.dimensions.indexOf(dim), 1);
        }
        catch (e) {
            console.log(e + ", " + e.message);
        }
    };
    ProfileDesignerComponent.prototype.deleteLink = function (link) {
        this.chartName.links.splice(this.chartName.links.indexOf(link), 1);
    };
    ProfileDesignerComponent.prototype.editLink = function (link) {
        var _this = this;
        this.linkToBeEditted = link;
        this.leftEntityFields = [];
        this.rightEntityFields = [];
        this.showNewConnectionModal = true;
        this.rightEntity = link.right;
        this.leftEntity = link.left;
        this.pService.GetEntities().subscribe((function (k) {
            _this.entitiesObj = k;
        }));
        this.entitiesObj.forEach(function (ent) {
            if (_this.rightEntity.name === ent.name) {
                _this.rightEntity = ent;
            }
            if (_this.leftEntity.name === ent.name) {
                _this.leftEntity = ent;
            }
        });
        this.leftEntity.fields.forEach(function (f) {
            _this.leftEntityField = { label: f.name, value: f };
            _this.leftEntityFields.push(_this.leftEntityField);
        });
        this.rightEntity.fields.forEach(function (f) {
            _this.rightEntityField = { label: f.name, value: f };
            _this.rightEntityFields.push(_this.rightEntityField);
        });
        if (link.right) {
            this.rightEntity.name = link.right.name;
            link.connectorLinks.forEach(function (l) {
                _this.listOfRightChoices.push(l.to);
            });
        }
        link.connectorLinks.forEach(function (l) {
            _this.listOfLeftChoices.push(l.from);
        });
        Object.keys(ConnectorType).forEach(function (key) {
            if (!isNaN(Number(ConnectorType[key])))
                _this.connectorTypes.push({ label: key, value: key });
        });
        this.leftEntity.name = link.left.name;
        this.conType = link.type;
        this.edittableLink = true;
    };
    ProfileDesignerComponent.prototype.saveEdittedLink = function () {
        var _this = this;
        if (this.listOfLeftChoices.length === this.listOfRightChoices.length) {
            this.chartName.links.splice(this.chartName.links.indexOf(this.linkToBeEditted), 1);
            this.newEntityCon = new ConnectorVm();
            var clonedLeftEntity = new EntityVm();
            var clonedRightEntity = new EntityVm();
            this.links = [];
            clonedLeftEntity = this.leftEntity;
            clonedRightEntity = this.rightEntity;
            clonedLeftEntity.fields = [];
            clonedRightEntity.fields = [];
            this.rightEntity;
            this.newEntityCon.left = clonedLeftEntity;
            this.newEntityCon.right = clonedRightEntity;
            this.newEntityCon.type = this.conType;
            // add condition on change of dropdown
            if (this.lEntityChanged && this.rEntityChanged) {
                this.listOfLeftChoices.pop();
                this.listOfRightChoices.pop();
            }
            for (var index = 0; index < this.listOfLeftChoices.length; index++) {
                var conLink = new ConnectorLinkVm();
                conLink.from = this.listOfLeftChoices[index];
                conLink.to = this.listOfRightChoices[index];
                this.newEntityCon.connectorLinks.push(conLink);
            }
            this.chartName.links.push(this.newEntityCon);
            this.showNewConnectionModal = false;
            this.edittableLink = false;
            this.listOfLeftChoices = [];
            this.listOfRightChoices = [];
            this.leftEntityFields = [];
            this.rightEntityFields = [];
            this.filteredEntities = [];
            this.conType = "PreserveLeft";
            this.linkToBeEditted = null;
            this.rEntityChanged = false;
            this.lEntityChanged = false;
            this.pService.GetEntities().subscribe((function (k) {
                _this.entitiesObj = k;
            }));
        }
    };
    ProfileDesignerComponent.prototype.saveField = function () {
        if (this.addedEntDim.dataElement.name && this.addedEntDim.nodeType && this.addedEntDim.entity) {
            if (this.addedEntDim.operation.toString() === "None" && this.addedEntDim.operand.name) {
                this.addedEntDim.operand = new DataElementVm();
            }
            this.editFieldSelect = false;
            this.showNewFieldModal = false;
            this.operatorVisible = false;
            this.operand1 = "Operand 1";
            this.operand2 = "Operand 2";
        }
    };
    ProfileDesignerComponent.prototype.newField = function () {
        this.addedEntDim = new DimensionVm();
        this.addedEntDim.dataElement = new DataElementVm();
        this.addedEntDim.operand = new DataElementVm();
        this.showNewFieldModal = true;
        this.operand1 = "Operand 1";
        this.operand2 = "Operand 2";
        this.operators = [
            { label: 'None', value: 'None' },
            { label: '+', value: 'Add' },
            { label: 'x', value: 'Multiply' },
            { label: '-', value: 'Subtract' },
            { label: '/', value: 'Divide' },
        ];
    };
    ProfileDesignerComponent.prototype.createNewField = function () {
        var _this = this;
        if (this.addedEntDim.dataElement.name && this.addedEntDim.nodeType && this.addedEntDim.entity) {
            if (this.addedEntDim.operation) {
                if (this.addedEntDim.operation.toString() === "None" && this.addedEntDim.operand.name) {
                    this.addedEntDim.operand = new DataElementVm();
                }
            }
            this.node;
            var kkey = this.node.key;
            this.dimensions.forEach(function (d) {
                if (d.entity == kkey) {
                    if (d.dimensions[0].nodeType.toString() === "DataLeaf") {
                        _this.addedEntDim.parent = d.dimensions[0].parent;
                    }
                }
            });
            this.newEntDim.dimensions.push(this.addedEntDim);
            this.showNewFieldModal = false;
            this.newOperandVisible = false;
        }
    };
    ProfileDesignerComponent.prototype.operatorChange = function () {
        if (this.addedEntDim.operation.toString() === "None") {
            this.addedEntDim.operand = new DataElementVm();
            this.operand2 = "Operand 2";
            this.newOperandVisible = false;
        }
        this.newOperandVisible = true;
    };
    ProfileDesignerComponent.prototype.onNewFieldHide = function () {
        this.newOperandVisible = false;
        this.operatorVisible = false;
        this.editFieldSelect = false;
        this.operand1 = "Operand 1";
        this.operand2 = "Operand 2";
    };
    ProfileDesignerComponent.prototype.dataElementChange = function (event) {
        this.operatorVisible = true;
        this.addedEntDim.dataElement = event.value;
    };
    ProfileDesignerComponent.prototype.operandChange = function (event) {
        this.addedEntDim.operand = event.value;
    };
    ProfileDesignerComponent.prototype.newConnection = function () {
        var _this = this;
        this.edittableLink = false;
        this.leftEntityFields = [];
        this.rightEntityFields = [];
        this.showNewConnectionModal = true;
        Object.keys(ConnectorType).forEach(function (key) {
            if (!isNaN(Number(ConnectorType[key])))
                _this.connectorTypes.push({ label: key, value: key });
        });
        this.pService.diagram.selection.toArray().forEach(function (n) {
            if (!(n instanceof go.Node))
                return;
            _this.selectedGoCharts.push(n.data.key);
        });
        this.entitiesObj.forEach(function (ent) {
            var res = _this.selectedGoCharts.filter(function (a) {
                return a === ent.name;
            });
            if (res.length > 0) {
                _this.filteredEntities.push(ent);
            }
        });
        this.leftEntity = this.filteredEntities[0];
        this.leftEntity.fields.forEach(function (f) {
            _this.leftEntityField = { label: f.name, value: f };
            _this.leftEntityFields.push(_this.leftEntityField);
        });
        this.listOfLeftChoices.push({});
        if (this.selectedGoCharts.length > 1) {
            this.rightEntity = this.filteredEntities[1];
            this.listOfRightChoices.push({});
            this.rightEntity.fields.forEach(function (f) {
                _this.rightEntityField = { label: f.name, value: f };
                _this.rightEntityFields.push(_this.rightEntityField);
            });
        }
        if (this.selectedGoCharts.length == 1) {
            this.rightEntity = this.leftEntity;
            this.rightEntity = this.filteredEntities[0];
            this.listOfRightChoices.push({});
            this.rightEntity.fields.forEach(function (f) {
                _this.rightEntityField = { label: f.name, value: f };
                _this.rightEntityFields.push(_this.rightEntityField);
            });
        }
    };
    ProfileDesignerComponent.prototype.onNewConnectionHide = function () {
        this.showNewConnectionModal = false;
        this.selectedGoCharts = [];
        this.connectorTypes = [];
        this.listOfLeftChoices = [];
        this.listOfRightChoices = [];
        this.filteredEntities = [];
        this.conType = "PreserveLeft";
    };
    ProfileDesignerComponent.prototype.leftEntityChange = function (event) {
        this.lEntityChanged = true;
        if (this.listOfLeftChoices.length === 1) {
            this.listOfLeftChoices.push({});
        }
        var d = this.listOfLeftChoices.indexOf(event.value);
        if (this.listOfLeftChoices.indexOf(event.value) === this.listOfLeftChoices.length - 1 && this.listOfLeftChoices.length !== 1) {
            this.listOfLeftChoices.push({});
        }
    };
    ProfileDesignerComponent.prototype.rightEntityChange = function (event) {
        this.rEntityChanged = true;
        if (this.listOfRightChoices.length === 1) {
            this.listOfRightChoices.push({});
        }
        var d = this.listOfRightChoices.indexOf(event.value);
        if (this.listOfRightChoices.indexOf(event.value) === this.listOfRightChoices.length - 1 && this.listOfRightChoices.length !== 1) {
            this.listOfRightChoices.push({});
        }
    };
    ProfileDesignerComponent.prototype.createNewConnection = function () {
        var _this = this;
        if (this.listOfLeftChoices.length === this.listOfRightChoices.length) {
            this.newEntityCon = new ConnectorVm();
            this.links = [];
            this.rightEntity.fields = this.rightEntityFields;
            this.leftEntity.fields = this.leftEntityFields;
            this.leftEntity.fields = [];
            this.rightEntity.fields = [];
            this.newEntityCon.left = this.leftEntity;
            this.newEntityCon.right = this.rightEntity;
            this.newEntityCon.type = this.conType;
            this.newEntityCon.isAdded = true;
            if (this.lEntityChanged && this.rEntityChanged) {
                this.listOfLeftChoices.pop();
                this.listOfRightChoices.pop();
            }
            for (var index = 0; index < this.listOfLeftChoices.length; index++) {
                var conLink = new ConnectorLinkVm();
                conLink.from = this.listOfLeftChoices[index];
                conLink.to = this.listOfRightChoices[index];
                this.newEntityCon.connectorLinks.push(conLink);
            }
            this.chartName.links.push(this.newEntityCon);
            this.chartName.links.forEach(function (con) {
                _this.links.push({ from: con.left.name, to: con.right.name, text: "1", toText: "0..N" });
            });
            this.model = new go.GraphLinksModel(this.entityDiagrams, this.links);
            this.showNewConnectionModal = false;
            this.selectedGoCharts = [];
            this.connectorTypes = [];
            this.listOfLeftChoices = [];
            this.listOfRightChoices = [];
            this.leftEntityFields = [];
            this.rightEntityFields = [];
            this.filteredEntities = [];
            this.conType = "PreserveLeft";
            this.rEntityChanged = false;
            this.lEntityChanged = false;
            this.pService.GetEntities().subscribe((function (k) {
                _this.entitiesObj = k;
            }));
        }
    };
    ProfileDesignerComponent.prototype.swapLeftAndRightEntities = function () {
        this.swapEntity = this.rightEntity;
        this.swapEntityFields = this.rightEntityFields;
        this.listOfSwapChoices = this.listOfRightChoices;
        this.rightEntity = this.leftEntity;
        this.rightEntityFields = this.leftEntityFields;
        this.listOfRightChoices = this.listOfLeftChoices;
        this.leftEntity = this.swapEntity;
        this.leftEntityFields = this.swapEntityFields;
        this.listOfLeftChoices = this.listOfSwapChoices;
        this.swapEntity = null;
        this.swapEntityFields = null;
        this.listOfSwapChoices = [];
    };
    ProfileDesignerComponent.prototype.setDefaultSortOrder = function () {
        this.newEntDim.sortOrder = "Asc";
        if (this.newEntDim.orderBy === null) {
            this.newEntDim.sortOrder = null;
        }
    };
    ProfileDesignerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'profile-designer',
                    template: "\n    <div class=\"ui-g\">\n      <div class=\"card ui-g-12\" style=\"margin:7px 10px\">\n        <div class=\"ui-g-3\">\n          <div class=\"ui-g-12\">\n            <button pButton type=\"button\" icon=\"ui-icon-person-add\" [disabled]=\"initNewProfile\" (click)=\"createProfile()\"></button>\n            <button pButton type=\"button\" icon=\"ui-icon-close\" [disabled]=\"!profileIsSelected\" (click)=\"deleteProfile()\" pTooltip=\"Delete profile\"></button>\n            <button pButton type=\"button\" icon=\"ui-icon-check\" [disabled]=\"!profileIsSelected\" (click)=\"saveProfile()\" pTooltip=\"Save profile\"></button>\n\n            <button pButton type=\"button\" icon=\"ui-icon-content-cut\" [disabled]=\"profileIsSelected\" pTooltip=\"Cut\" (click)=\"cut()\"></button>\n            <button pButton type=\"button\" icon=\"ui-icon-content-copy\" [disabled]=\"profileIsSelected\" pTooltip=\"Copy\" (click)=\"copy()\"></button>\n            <button pButton type=\"button\" icon=\"ui-icon-content-paste\" [disabled]=\"!copyValid\" (click)=\"paste()\"></button>\n\n            <button pButton type=\"button\" icon=\"ui-icon-insert-chart\" [disabled]=\"!bandIsSelected\" (click)=\"createNewChart()\" pTooltip=\"Create new chart\"></button>\n\n\n          </div>\n          <div class=\"ui-g-12 pad-left-0\">\n            <div class=\"ui-g-3\">\n              <p-tree [value]=\"profiles\" selectionMode=\"single\" [(selection)]=\"selectedNode\" (onNodeSelect)=\"nodeSelect($event)\" (onNodeUnselect)=\"nodeUnselect($event)\">\n                <ng-template let-node pTemplate=\"default\">\n                  <div class=\"ui-g inp-div\">\n                    <input-lbl (blur)=\"blur(node)\" class=\"inp-lbl ui-g-4\" [(ngModel)]=\"node.label\" [required]=\"true\" type=\"text\"> </input-lbl>\n                    <div class=\"ui-g-8\" *ngIf=\"selectedNode && node===selectedNode\">\n                      <button pButton class=\"add-btn\" icon=\"ui-icon-close\" type=\"button\" *ngIf=\"node.parent && nodeSelected\" (click)=\"deleteNode()\"></button>\n                      <button pButton class=\"add-btn\" icon=\"ui-icon-add\" type=\"button\" *ngIf=\"nodeSelected && !chartIsSelected\" (click)=\"createNew()\"></button>\n                      <button pButton class=\"add-btn\" icon=\"ui-icon-edit\" type=\"button\" *ngIf=\"chartIsSelected\" (click)=\"editChart()\"></button>\n\n                    </div>\n                  </div>\n                </ng-template>\n              </p-tree>\n            </div>\n          </div>\n          <div class=\"ui-g-12\">\n            <!-- <button pButton type=\"button\" label=\"Refresh\" icon=\"\" (click)=\"refreshDesigner()\"></button> -->\n          </div>\n\n\n          <p-dialog header={{NewChartHeader}} [(visible)]=\"showNewChartModal\" [responsive]=\"true\" [modal]=\"true\" width=\"750\" (onHide)=\"onNewChart_EntityHide()\">\n            <div class=\"ui-g\">\n              <div class=\"ui-g-12\">\n                <div class=\"ui-g-2\">Title:</div>\n                <div class=\"ui-g-10\">\n                  <input id=\"input\" type=\"text\" class=\"ui-g-12\" pInputText [(ngModel)]=\"chartName.title\" />\n                </div>\n              </div>\n              <div class=\"ui-g-12\">\n                <div class=\"ui-g-2\">Type:</div>\n                <div class=\"ui-g-10\">\n                  <p-dropdown class=\"dropdown\" [options]=\"types\" placeholder=\"Select\" [(ngModel)]=\"chartType\"></p-dropdown>\n                </div>\n              </div>\n              <div class=\"ui-g-12\">\n\n                <p-treeTable>\n                  <p-column header=\"Entity name\"></p-column>\n                  <p-column header=\"Type\"></p-column>\n                </p-treeTable>\n                <p-treeTable [value]=\"entities\" [(selection)]=\"selectedEntity\" selectionMode=\"checkbox\" [style]=\"{'max-height':'500px', 'overflow-y':'auto'}\">\n                  <p-column field=\"friendlyName\"></p-column>\n                  <p-column field=\"type\"></p-column>\n                </p-treeTable>\n                <button pButton type=\"button\" *ngIf=\"!addNewEntity\" label=\"Create\" class=\"pull-right marg-top-10\" icon=\"ui-icon-check\" (click)=\"makeChart()\"></button>\n                <button pButton type=\"button\" *ngIf=\"addNewEntity\" label=\"Save\" class=\"pull-right marg-top-10\" icon=\"ui-icon-check\"\n                  (click)=\"saveEdittedChart()\"></button>\n\n              </div>\n            </div>\n          </p-dialog>\n        </div>\n\n        <div class=\"ui-g-9\">\n          <p-tabView *ngIf=\"makeChartInit\" (onChange)=\"loadProfileOnTab($event)\">\n            <p-tabPanel header=\"Chart Designer\">\n              <div class=\"ui-g\">\n                <div class=\"ui-g-12\">\n                  <div class=\"ui-g-9\">\n                    <app-diagram-editor [model]=\"model\" (nodeSelected)=\"showDetails($event)\" (modelChanged)=\"onModelChanged($event)\">\n                    </app-diagram-editor>\n                  </div>\n                  <div class=\"ui-g-3\" *ngIf=\"node\">\n                    Entity:\n                    <p-accordion>\n                      <p-accordionTab [selected]=\"true\">\n                        <p-header class=\"ellipsis\">{{newEntDim.entity}}</p-header>\n                        <div class=\"ui-g\">\n                          <div class=\"ui-g-12\">\n                            Caption:\n                          </div>\n                          <div class=\"ui-g-12\">\n                            <div class=\"ui-g inp-div\">\n                              <input pInputText [(ngModel)]=\"newEntDim.entity\" [required]=\"true\" type=\"text\" />\n                            </div>\n                          </div>\n                          <div class=\"ui-g-12\">\n                            Order by:\n                          </div>\n                          <div class=\"ui-g-6\">\n                            <p-dropdown class=\"ddfill\" [options]=\"fields\" (onChange)=\"setDefaultSortOrder()\" placeholder=\"Select\" [(ngModel)]=\"newEntDim.orderBy\"></p-dropdown>\n                          </div>\n                          <!-- <div class=\"ui-g-12\">\n                            Sort Order:\n                          </div> -->\n                          <div class=\"ui-g-6\">\n                            <p-dropdown class=\"ddfill\" [options]=\"orders\" placeholder=\"Select\" [(ngModel)]=\"newEntDim.sortOrder\"></p-dropdown>\n                            </div>\n                          <div class=\"ui-g-12\">\n                            Record Count:\n                          </div>\n                          <div class=\"ui-g-12\">\n                            <p-spinner class=\"ddfill\" size=\"10\" [(ngModel)]=\"newEntDim.recordCount\" [min]=\"0\" [placeholder]=\"0\" [placeholder]=\"0\"></p-spinner>\n                          </div>\n                        </div>\n                      </p-accordionTab>\n                    </p-accordion>\n                    <div class=\"ui-g-12\">\n                      <button pButton type=\"button\" label=\"Add field\" icon=\"ui-icon-add\" (click)=\"newField()\"></button>\n                      <button pButton type=\"button\" label=\"New link\" icon=\"ui-icon-subdirectory-arrow-right\" (click)=\"newConnection()\"></button>\n\n                    </div>\n                    <div style=\"margin-top:60px\">\n                      Fields:\n                      <p-accordion>\n                        <p-accordionTab *ngFor=\"let acc of newEntDim.dimensions \">\n                          <p-header>\n                            <span class=\"ellipsis\"> {{acc.entity}} </span>\n                            <span (click)=\"deleteField(acc)\" class=\"remove-button\">\u00D7</span>\n                          </p-header>\n                          <div class=\"ui-g\" *ngIf=\"acc.nodeType==='Branch' || acc.nodeType==='DataLeaf'\">\n                            <div class=\"ui-g-12\">\n                              Caption:\n                            </div>\n                            <div class=\"ui-g-12\">\n                              <div class=\"ui-g inp-div\">\n                                <input pInputText [(ngModel)]=\"acc.entity\" [required]=\"true\" type=\"text\" />\n                              </div>\n                            </div>\n\n                            <div class=\"ui-g-12\">\n                              <p-checkbox [(ngModel)]=\"acc.isMultiValue\" binary=\"true\" label=\"Multi value:\"></p-checkbox>\n                            </div>\n                            <div class=\"ui-g-12\">\n                              <p-checkbox [(ngModel)]=\"acc.isUnique\" binary=\"true\" label=\"Is Unique:\"></p-checkbox>\n                            </div>\n                            <div class=\"ui-g-12\">\n                              Group:\n                            </div>\n                            <div class=\"ui-g-12\">\n                              <p-spinner class=\"ddfill\" size=\"10\" [(ngModel)]=\"acc.group\" [min]=\"0\" [placeholder]=\"0\"></p-spinner>\n                            </div>\n\n                            <div class=\"ui-g-12\">\n                              <p-checkbox [(ngModel)]=\"acc.isRefDate\" binary=\"true\" label=\"Filter by:\"></p-checkbox>\n                            </div>\n                          </div>\n\n\n                          <div class=\"ui-g\" *ngIf=\"acc.nodeType==='SumLeaf' || acc.nodeType==='AvgLeaf' || acc.nodeType==='CountLeaf'\">\n                            <div class=\"ui-g-12\">\n                              Caption:\n                            </div>\n                            <div class=\"ui-g-12\">\n                              <div class=\"ui-g inp-div\">\n                                <input pInputText [(ngModel)]=\"acc.entity\" [required]=\"true\" type=\"text\" />\n                              </div>\n                            </div>\n\n                            <div class=\"ui-g-12\">\n                              Expression:\n                            </div>\n                            <div class=\"ui-g-12\" *ngIf=\"acc.operand && acc.dataElement\">\n                              {{acc.nodeType | safeHtml}} ( {{acc.dataElement.parent.name}}.{{acc.dataElement.name}}\n\n                              <span *ngIf=\"acc.operand.name && acc.operand.parent.name\"> {{acc.operation | formatOp}} {{acc.operand.parent.name}}.{{acc.operand.name}} </span> )\n\n                              <button pButton type=\"button\" class=\"pull-right\" icon=\"ui-icon-edit\" (click)=\"editField(acc)\"></button>\n\n                            </div>\n\n                          </div>\n                        </p-accordionTab>\n                      </p-accordion>\n                    </div>\n\n                    <div style=\"margin-top:20px\" *ngIf=\"chartName.links.length > 0\">\n                      Links:\n                      <p-accordion>\n                        <p-accordionTab *ngFor=\"let lnk of chartName.links\">\n                          <p-header>\n                            <span class=\"ellipsis\"> {{lnk.left.name}} => {{lnk.right.name}} </span>\n                            <span (click)=\"deleteLink(lnk)\" class=\"remove-button\">\u00D7</span>\n                          </p-header>\n                          <div class=\"ui-g\">\n                            <div class=\"ui-g-12\" *ngIf=\"lnk\">\n                              {{lnk.left.name}} => {{lnk.right.name}} ( {{lnk.type}} )\n                              <button pButton type=\"button\" class=\"pull-right\" icon=\"ui-icon-edit\" (click)=\"editLink(lnk)\"></button>\n                            </div>\n                          </div>\n                        </p-accordionTab>\n                      </p-accordion>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </p-tabPanel>\n            <p-tabPanel header=\"Preview\">\n              <div class=\"ui-g\">\n                <bi-viewer [url]=\"url\"></bi-viewer>\n              </div>\n            </p-tabPanel>\n          </p-tabView>\n        </div>\n      </div>\n    </div>\n    <!--  -->\n\n    <p-dialog header=\"Add Field\" *ngIf=\"addedEntDim.dataElement\" (onHide)='onNewFieldHide()' [(visible)]=\"showNewFieldModal\"\n      [responsive]=\"true\" [modal]=\"true\" width=\"750\" class=\"newConDialog\">\n      <div class=\"ui-g\">\n        <div class=\"ui-g-12\">\n          <div class=\"ui-g-2\">\n            <p-dropdown class=\"dropdown\" [options]=\"nTypes\" placeholder=\"Function\" [(ngModel)]=\"addedEntDim.nodeType\"></p-dropdown>\n          </div>\n          <div class=\"ui-g-4\">\n            <p-dropdown class=\"dropdown conddwn\" (onChange)=\"dataElementChange($event)\" [options]=\"allFields\" placeholder={{operand1}}\n              [(ngModel)]=\"operand1\"></p-dropdown>\n          </div>\n          <div class=\"ui-g-2\" *ngIf=\"operatorVisible  || editFieldSelect\">\n            <p-dropdown class=\"dropdown\" [options]=\"operators\" (onChange)=\"operatorChange()\" [(ngModel)]=\"addedEntDim.operation\"></p-dropdown>\n          </div>\n          <div class=\"ui-g-4\" *ngIf=\"newOperandVisible || editFieldSelect\">\n            <p-dropdown class=\"dropdown conddwn\" (onChange)=\"operandChange($event)\" [options]=\"allFields\" placeholder={{operand2}} [(ngModel)]=\"operand2\"></p-dropdown>\n          </div>\n        </div>\n        <div class=\"ui-g-12\">\n          <span *ngIf=\"addedEntDim.dataElement.parent\">\n            {{addedEntDim.nodeType | safeHtml}} ( {{addedEntDim.dataElement.parent.name}}.{{addedEntDim.dataElement.name}}\n            <span *ngIf=\"addedEntDim.operand.parent && addedEntDim.operand\">\n              {{addedEntDim.operation | formatOp}} {{addedEntDim.operand.parent.name}}.{{addedEntDim.operand.name}}\n            </span>\n            )\n          </span>\n        </div>\n        <div class=\"ui-g-12\">\n          <div class=\"ui-g-2\">Caption:</div>\n          <div class=\"ui-g-10\">\n            <input id=\"input\" type=\"text\" class=\"ui-g-12\" pInputText [(ngModel)]=\"addedEntDim.entity\" />\n          </div>\n        </div>\n\n        <div class=\"ui-g-12\">\n          <button pButton type=\"button\" *ngIf=\"editFieldSelect\" label=\"Save\" class=\"pull-right\" icon=\"ui-icon-check\" (click)=\"saveField()\"></button>\n          <button pButton type=\"button\" *ngIf=\"!editFieldSelect\" label=\"Create\" class=\"pull-right\" icon=\"ui-icon-check\" (click)=\"createNewField()\"></button>\n        </div>\n      </div>\n    </p-dialog>\n\n    <p-dialog class=\"newConDialog\" header=\"New Connection\" (onHide)='onNewConnectionHide()' [(visible)]=\"showNewConnectionModal\"\n      [responsive]=\"true\" [modal]=\"true\" width=\"750\">\n      <div class=\"ui-g\">\n        <div class=\"ui-g-12\" *ngIf=\"showNewConnectionModal\">\n          <div class=\"ui-g-4\">\n\n            <p-panel header=\"{{leftEntity.name}}\">\n              <div *ngIf=\"listOfLeftChoices.length > 0\">\n                <p-dropdown class=\"dropdown conddwn\" [(ngModel)]=\"listOfLeftChoices[i]\" *ngFor=\"let choice of listOfLeftChoices ;let i = index\"\n                  [options]=\"leftEntityFields\" placeholder=\"Select\" (onChange)=\"leftEntityChange($event)\"></p-dropdown>\n              </div>\n            </p-panel>\n\n          </div>\n\n          <div class=\"ui-g-4\">\n            <button pButton type=\"button\" icon=\"ui-icon-compare-arrows\" (click)=\"swapLeftAndRightEntities()\"></button>\n            <p-dropdown class=\"dropdown\" [options]=\"connectorTypes\" [(ngModel)]=\"conType\" placeholder=\"PreserveLeft\"></p-dropdown>\n          </div>\n\n          <div class=\"ui-g-4\">\n            <p-panel header=\"{{rightEntity.name}}\">\n              <div *ngIf=\"listOfRightChoices.length > 0\">\n                <p-dropdown class=\"dropdown conddwn\" [(ngModel)]=\"listOfRightChoices[i]\" *ngFor=\"let choice of listOfRightChoices ;let i = index\"\n                  [options]=\"rightEntityFields\" placeholder=\"Select\" (onChange)=\"rightEntityChange($event)\"></p-dropdown>\n              </div>\n            </p-panel>\n\n          </div>\n        </div>\n\n        <div class=\"ui-g-12\">\n          <button pButton type=\"button\" *ngIf=\"edittableLink\" label=\"Save\" class=\"pull-right\" icon=\"ui-icon-check\" (click)=\"saveEdittedLink()\"></button>\n          <button pButton type=\"button\" *ngIf=\"!edittableLink\" label=\"Create\" class=\"pull-right\" icon=\"ui-icon-check\" (click)=\"createNewConnection()\"></button>\n        </div>\n      </div>\n    </p-dialog>\n  ",
                    styles: ["\n    @media print{.no-print,.no-print *{display:none !important}}.label-card{max-height:165px;margin-bottom:auto !important}.ellipsis{text-overflow:ellipsis;overflow:hidden;max-width:87%;white-space:nowrap;display:inline-block}.float-right{float:right}.no-margin{margin:auto}.main-value{font-size:36px;font-weight:bold;text-align:center}.caption{font-weight:bold}.table-view-col{width:20px;text-align:center}.ui-datatable-header h4{margin:auto}.ui-datatable .ui-datatable-footer{padding:4px !important}.pad4{padding:4px}.pad-inherit{padding:inherit}.pad05{padding:0px 5px 5px 5px}.marg-top-10{margin-top:10px}@media screen and (max-width: 641px){.c-input span input{width:100% !important}.c-input span{width:100% !important}}.ui-fieldset{padding:2px !important}h2{font-weight:500 !important}.card{margin-bottom:0px !important}.chart-card{padding:0px 5px}.add-btn{width:20px !important;height:20px !important;padding:11px !important;line-height:0em !important;float:right}.inp-lbl{padding:4px}.inp-div .ui-g-8{padding:.2em !important}.ui-tree{width:314px;min-height:40px}.entity-tree .ui-tree{width:44em;max-height:21%;overflow-y:auto}.pull-right{float:right}.ui-dialog{max-height:99% !important}div .dropdown{min-width:20px !important}.ui-dropdown{min-width:75px !important}.add-btn .fa{font-size:15px}.ui-treenode-label{min-width:74%}.pad-left-0{padding-left:0pc}.ui-accordion-header{margin:3px 0px}.remove-button{font-size:21px;background-color:white;color:#555555;display:block;text-align:center;border-radius:13px;width:28px;cursor:pointer;float:right}.remove-button:hover{background-color:#374b69;color:white}.ui-treetable thead th,body .ui-treetable thead tr th{padding:0px}.dropdown div{width:auto !important}.ddfill div{width:100% !important}body .ddfill .ui-dropdown .ui-dropdown-trigger .fa{margin-left:90% !important}.newConDialog .ui-dialog .ui-dialog-content{overflow:inherit !important}.newConDialog .ui-dialog{top:70px !important}.conddwn div{display:block;margin-bottom:15px}body .ui-treetable thead tr{border:1px solid #bdbdbd}\n  "]
                },] },
    ];
    /** @nocollapse */
    ProfileDesignerComponent.ctorParameters = function () { return [
        { type: BIService, },
    ]; };
    ProfileDesignerComponent.propDecorators = {
        'url': [{ type: Input, args: ['url',] },],
        'textField': [{ type: ViewChild, args: ['text',] },],
    };
    return ProfileDesignerComponent;
}());
export { ProfileDesignerComponent };
var Safe = /** @class */ (function () {
    function Safe(sanitized) {
        this.sanitized = sanitized;
    }
    Safe.prototype.transform = function (value) {
        return value = value.slice(0, -4);
    };
    Safe.decorators = [
        { type: Pipe, args: [{ name: 'safeHtml' },] },
    ];
    /** @nocollapse */
    Safe.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    return Safe;
}());
export { Safe };
var Format = /** @class */ (function () {
    function Format(sanitized) {
        this.sanitized = sanitized;
    }
    Format.prototype.transform = function (value) {
        if (value === "Add")
            value = "+";
        if (value === "Multiply")
            value = "x";
        if (value === "Subtract")
            value = "-";
        if (value === "Divide")
            value = "/";
        return value;
    };
    Format.decorators = [
        { type: Pipe, args: [{ name: 'formatOp' },] },
    ];
    /** @nocollapse */
    Format.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    return Format;
}());
export { Format };
//# sourceMappingURL=profile-designer.component.js.map