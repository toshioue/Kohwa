import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import * as go from 'gojs';
import { BIService } from '../../../services/bi-chart-viewer';
var DiagramEditorComponent = /** @class */ (function () {
    function DiagramEditorComponent(service) {
        var _this = this;
        this.service = service;
        this.nodeSelected = new EventEmitter();
        this.modelChanged = new EventEmitter();
        var $ = go.GraphObject.make;
        this.service.diagram = new go.Diagram();
        this.service.diagram.initialContentAlignment = go.Spot.Center;
        this.service.diagram.undoManager.isEnabled = true;
        this.service.diagram.addDiagramListener("ChangedSelection", function (e) {
            var node = e.diagram.selection.first();
            _this.nodeSelected.emit(node instanceof go.Node ? node : null);
        });
        this.service.diagram.addModelChangedListener(function (e) { return e.isTransactionFinished && _this.modelChanged.emit(e); });
        var lightgrad = $(go.Brush, "Linear", { 1: "#E5E5E5", 0: "#FFFFFF" });
        var itemTempl = $(go.Panel, "Horizontal", $(go.Shape, { desiredSize: new go.Size(10, 10) }, new go.Binding("figure", "figure"), new go.Binding("fill", "color")), $(go.TextBlock, {
            margin: new go.Margin(5, 0, 0, 5),
            //      editable: true,
            stroke: "#333333",
            font: "bold 14px sans-serif"
        }, new go.Binding("text", "name")));
        this.service.diagram.nodeTemplate =
            $(go.Node, "Auto", {
                minSize: new go.Size(180, 150),
                selectionAdorned: true,
                resizable: true,
                layoutConditions: go.Part.LayoutStandard & ~go.Part.LayoutNodeSized,
                fromSpot: go.Spot.AllSides,
                toSpot: go.Spot.AllSides,
                isShadowed: true,
                shadowColor: "#C5C1AA"
            }, new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, "Rectangle", {
                fill: lightgrad, stroke: "#756875", strokeWidth: 3,
            }), $(go.Panel, "Table", { margin: 8, stretch: go.GraphObject.Fill }, $(go.RowColumnDefinition, { row: 0, sizing: go.RowColumnDefinition.None }), new go.Binding("fill", "color")), $(go.TextBlock, // header
            {
                //      editable: true,
                row: 0, alignment: go.Spot.TopCenter,
                margin: new go.Margin(5, 14, 10, 2),
                font: "bold 16px sans-serif"
            }, new go.Binding("text", "key")), 
            // $("PanelExpanderButton", "LIST",  // the name of the element whose visibility this button toggles
            //   { row: 0, alignment: go.Spot.TopRight }),
            $(go.Panel, "Vertical", {
                name: "LIST",
                row: 1,
                padding: 3,
                alignment: go.Spot.Center,
                defaultAlignment: go.Spot.Left,
                stretch: go.GraphObject.Horizontal,
                itemTemplate: itemTempl
            }, new go.Binding("itemArray", "items"))); // end Table Panel
        // );
        this.service.diagram.linkTemplate =
            $(go.Link, 
            // allow relinking
            {
                selectionAdorned: true,
                layerName: "Foreground",
                reshapable: true,
                routing: go.Link.AvoidsNodes,
                corner: 5,
                curve: go.Link.JumpOver
            }, $(go.Shape, // the link shape
            { stroke: "#303B45", strokeWidth: 2.5 }), $(go.TextBlock, // the "from" label
            {
                editable: true,
                textAlign: "center",
                font: "bold 14px sans-serif",
                stroke: "#1967B3",
                segmentIndex: 0,
                segmentOffset: new go.Point(NaN, NaN),
                segmentOrientation: go.Link.OrientUpright
            }, new go.Binding("text", "text")), $(go.TextBlock, // the "to" label
            {
                editable: true,
                textAlign: "center",
                font: "bold 14px sans-serif",
                stroke: "#1967B3",
                segmentIndex: -1,
                segmentOffset: new go.Point(NaN, NaN),
                segmentOrientation: go.Link.OrientUpright
            }, new go.Binding("text", "toText")));
    }
    Object.defineProperty(DiagramEditorComponent.prototype, "model", {
        get: function () { return this.service.diagram.model; },
        set: function (val) { this.service.diagram.model = val; },
        enumerable: true,
        configurable: true
    });
    DiagramEditorComponent.prototype.ngOnInit = function () {
        this.service.diagram.div = this.diagramRef.nativeElement;
    };
    DiagramEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-diagram-editor',
                    template: "\n    <div class=\"diagramsPanel\">\n      <!-- <div #paletteDiv class=\"paletteDiv\"></div> -->\n      <div #diagramDiv class=\"diagramDiv\"></div>\n    </div>\n  ",
                    styles: ["\n    .diagramsPanel{width:100%;white-space:nowrap;position:relative}.diagramDiv{border:1px solid black;display:inline-block;vertical-align:top;width:100%;height:700px}\n  "]
                },] },
    ];
    /** @nocollapse */
    DiagramEditorComponent.ctorParameters = function () { return [
        { type: BIService, },
    ]; };
    DiagramEditorComponent.propDecorators = {
        'diagramRef': [{ type: ViewChild, args: ['diagramDiv',] },],
        'model': [{ type: Input },],
        'nodeSelected': [{ type: Output },],
        'modelChanged': [{ type: Output },],
    };
    return DiagramEditorComponent;
}());
export { DiagramEditorComponent };
//# sourceMappingURL=diagram-editor.component.js.map