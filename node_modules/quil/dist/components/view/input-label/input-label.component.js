import { Component, Input, Output, ElementRef, EventEmitter, ViewChild, Renderer, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var INLINE_EDIT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return InputLabelComponent; }),
    multi: true
};
var InputLabelComponent = /** @class */ (function () {
    function InputLabelComponent(element, _renderer) {
        this._renderer = _renderer;
        this.label = ''; // Label value for input element
        this.type = 'text'; // The type of input element
        this.required = false; // Is input requried?
        this.disabled = false; // Is input disabled?
        //  @Input() editable: boolean = true; // Is input disabled?
        this.blur = new EventEmitter(); // Is input lost focus?
        // @Output('valueChange')valueModified:EventEmitter<any> = new EventEmitter<any>();// Is input lost focus?
        this._value = ''; // Private variable for input value
        this.preValue = ''; // The value before clicking to edit
        this.editing = false; // Is Component in edit mode?
        this.onChange = Function.prototype; // Trascend the onChange event
        this.onTouched = Function.prototype; // Trascend the onTouch event
        this.editCaption = "Click to edit";
    }
    Object.defineProperty(InputLabelComponent.prototype, "value", {
        // Control Value Accessors for ngModel
        get: function () {
            return this._value;
        },
        set: function (v) {
            if (v !== this._value) {
                this._value = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    // Required for ControlValueAccessor interface
    InputLabelComponent.prototype.writeValue = function (value) {
        this._value = value;
    };
    // Required forControlValueAccessor interface
    InputLabelComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
        // this.valueModified.next()
    };
    // Required forControlValueAccessor interface
    InputLabelComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    // Do stuff when the input element loses focus
    InputLabelComponent.prototype.onBlur = function (event) {
        this.editing = false;
        this.blur.next(event);
    };
    // Start the editting process for the input element
    InputLabelComponent.prototype.edit = function (value) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.preValue = value;
        this.editing = true;
        // Focus on the input element just as the editing begins
        setTimeout(function (_) { return _this._renderer.invokeElementMethod(_this.inlineEditControl.nativeElement, 'focus'); });
    };
    InputLabelComponent.prototype.ngOnInit = function () {
        if (this.disabled)
            this.editCaption = '';
    };
    InputLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-lbl',
                    template: "\n        <div *ngIf=\"editing && !disabled\">\n          <input class=\"input-label\" pInputText #inputlabel [required]=\"required\" (blur)=\"onBlur($event)\" [name]=\"value\" [(ngModel)]=\"value\"\n            [type]=\"type\" [placeholder]=\"label\" />\n        </div>\n        <div *ngIf=\"!editing\">\n          <!--<label >{{label}}</label>-->\n          <div [title]=\"editCaption\" (click)=\"edit(value)\" (focus)=\"edit(value);\" tabindex=\"0\" class=\"inline-edit\">{{value}}&nbsp;</div>\n        </div>\n    ",
                    providers: [INLINE_EDIT_CONTROL_VALUE_ACCESSOR],
                    styles: ["\n      @media print{.no-print,.no-print *{display:none !important}}.label-card{max-height:165px;margin-bottom:auto !important}.ellipsis{text-overflow:ellipsis;overflow:hidden;max-width:87%;white-space:nowrap;display:inline-block}.float-right{float:right}.no-margin{margin:auto}.main-value{font-size:36px;font-weight:bold;text-align:center}.caption{font-weight:bold}.table-view-col{width:20px;text-align:center}.ui-datatable-header h4{margin:auto}.ui-datatable .ui-datatable-footer{padding:4px !important}.pad4{padding:4px}.pad-inherit{padding:inherit}.pad05{padding:0px 5px 5px 5px}.marg-top-10{margin-top:10px}@media screen and (max-width: 641px){.c-input span input{width:100% !important}.c-input span{width:100% !important}}.ui-fieldset{padding:2px !important}h2{font-weight:500 !important}.card{margin-bottom:0px !important}.chart-card{padding:0px 5px}.add-btn{width:20px !important;height:20px !important;padding:11px !important;line-height:0em !important;float:right}.inp-lbl{padding:4px}.inp-div .ui-g-8{padding:.2em !important}.ui-tree{width:314px;min-height:40px}.entity-tree .ui-tree{width:44em;max-height:21%;overflow-y:auto}.pull-right{float:right}.ui-dialog{max-height:99% !important}div .dropdown{min-width:20px !important}.ui-dropdown{min-width:75px !important}.add-btn .fa{font-size:15px}.ui-treenode-label{min-width:74%}.pad-left-0{padding-left:0pc}.ui-accordion-header{margin:3px 0px}.remove-button{font-size:21px;background-color:white;color:#555555;display:block;text-align:center;border-radius:13px;width:28px;cursor:pointer;float:right}.remove-button:hover{background-color:#374b69;color:white}.ui-treetable thead th,body .ui-treetable thead tr th{padding:0px}.dropdown div{width:auto !important}.ddfill div{width:100% !important}body .ddfill .ui-dropdown .ui-dropdown-trigger .fa{margin-left:90% !important}.newConDialog .ui-dialog .ui-dialog-content{overflow:inherit !important}.newConDialog .ui-dialog{top:70px !important}.conddwn div{display:block;margin-bottom:15px}body .ui-treetable thead tr{border:1px solid #bdbdbd}\n    "]
                },] },
    ];
    /** @nocollapse */
    InputLabelComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    InputLabelComponent.propDecorators = {
        'inlineEditControl': [{ type: ViewChild, args: ['inputlabel',] },],
        'label': [{ type: Input },],
        'type': [{ type: Input },],
        'required': [{ type: Input },],
        'disabled': [{ type: Input },],
        'blur': [{ type: Output, args: ['blur',] },],
    };
    return InputLabelComponent;
}());
export { InputLabelComponent };
//# sourceMappingURL=input-label.component.js.map