import { OnInit, PipeTransform, OnDestroy } from '@angular/core';
import { TreeNode } from 'primeng/primeng';
import { SelectItem } from 'primeng/primeng';
import * as go from "gojs";
import { DomSanitizer } from '@angular/platform-browser';
import { DimensionVm, ChartStructureVm, ProfileStructure, ConnectorVm, ConnectorLinkVm } from '../index';
import { BIService } from '../../services/bi-chart-viewer';
export declare class ProfileDesignerComponent implements OnInit, OnDestroy {
    private pService;
    previewSet: boolean;
    ngOnDestroy(): void;
    url: string;
    NewChartHeader: string;
    rEntityChanged: boolean;
    lEntityChanged: boolean;
    addNewEntity: boolean;
    allEntities: any;
    linkToBeEditted: any;
    showEditConnectionModal: boolean;
    edittableLink: boolean;
    newFieldCon: ConnectorLinkVm;
    conType: any;
    newEntityCon: ConnectorVm;
    listOfSwapChoices: any[];
    listOfRightChoices: any[];
    listOfLeftChoices: any[];
    connectorTypes: SelectItem[];
    leftEntityField: SelectItem;
    leftEntityFields: SelectItem[];
    rightEntityField: SelectItem;
    rightEntityFields: SelectItem[];
    swapEntityField: SelectItem;
    swapEntityFields: SelectItem[];
    swapEntity: any;
    leftEntity: any;
    rightEntity: any;
    filteredEntities: any[];
    selectedGoCharts: any[];
    showNewConnectionModal: boolean;
    operand1: any;
    operand2: any;
    profilesObj: Array<ProfileStructure>;
    profiles: TreeNode[];
    profileReady: boolean;
    nodeSelected: boolean;
    selectedNode: TreeNode;
    profileNode: TreeNode;
    bandIsSelected: boolean;
    chartIsSelected: boolean;
    profileIsSelected: boolean;
    initNewProfile: boolean;
    firstNode: TreeNode;
    secondNode: TreeNode;
    firstNodeType: string;
    secondNodeType: string;
    copyInitiated: boolean;
    cutInitiated: boolean;
    copyValid: boolean;
    cloneNode: TreeNode;
    profileExists: boolean;
    makeChartInit: boolean;
    chartType: string;
    chartName: ChartStructureVm;
    types: SelectItem[];
    clonedEntities: TreeNode[];
    selectedEntity: TreeNode[];
    entitiesObj: any;
    entities: TreeNode[];
    selectedEntities: string[];
    entitiesnode: any[];
    links: any[];
    model: go.GraphLinksModel;
    entityDiagrams: any[];
    operatorVisible: boolean;
    newOperandVisible: boolean;
    ops: any[];
    editFieldSelect: boolean;
    operators: SelectItem[];
    allFields: SelectItem[];
    allField: SelectItem;
    fields: SelectItem[];
    field: SelectItem;
    fieldDefault: SelectItem;
    orders: SelectItem[];
    nodeTypes: any[];
    nTypes: SelectItem[];
    showNewChartModal: boolean;
    showNewFieldModal: boolean;
    dimensions: DimensionVm[];
    newEntDim: any;
    addedEntDim: DimensionVm;
    private textField;
    node: go.Node;
    showDetails(node: go.Node | null): void;
    onModelChanged(c: go.ChangedEvent): void;
    constructor(pService: BIService);
    ngOnInit(): void;
    loadProfileOnTab(event: any): void;
    getProfileStructureInit(): void;
    nodeSelect(node: TreeNode): void;
    nodeUnselect(event: any): void;
    blur(): void;
    copy(): void;
    cut(): void;
    paste(): void;
    createNewChart(): void;
    editChart(): void;
    createProfile(): void;
    createNewBand(): void;
    addChartToBand(): void;
    createNew(): void;
    saveProfile(): void;
    deleteNode(): void;
    deleteProfile(): void;
    deleteBand(): void;
    deleteChart(): void;
    makeChart(): void;
    onNewChart_EntityHide(): void;
    saveEdittedChart(): void;
    viewChartDesigner(): void;
    loadLinkTypes(): void;
    editField(dim: any): void;
    deleteField(dim: any): void;
    deleteLink(link: any): void;
    editLink(link: any): void;
    saveEdittedLink(): void;
    saveField(): void;
    newField(): void;
    createNewField(): void;
    operatorChange(): void;
    onNewFieldHide(): void;
    dataElementChange(event: any): void;
    operandChange(event: any): void;
    newConnection(): void;
    onNewConnectionHide(): void;
    leftEntityChange(event: any): void;
    rightEntityChange(event: any): void;
    createNewConnection(): void;
    swapLeftAndRightEntities(): void;
    setDefaultSortOrder(): void;
}
export declare class Safe implements PipeTransform {
    private sanitized;
    constructor(sanitized: DomSanitizer);
    transform(value: any): any;
}
export declare class Format implements PipeTransform {
    private sanitized;
    constructor(sanitized: DomSanitizer);
    transform(value: any): any;
}
