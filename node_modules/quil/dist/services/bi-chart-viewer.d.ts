import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { Observable } from "rxjs/Observable";
import { Http, Headers, RequestOptions } from "@angular/http";
import * as go from 'gojs';
import { ChartDataVm, ProfileStructureVm, ChartData } from '../components/index';
import { BandsComponent } from '../index';
export declare class BIService {
    private http;
    url: string;
    wsUrl: string;
    diagram: go.Diagram;
    profileBands: any;
    profileTitle: any;
    group: string;
    chartDatas: BandsComponent[];
    connection: any;
    protected options: RequestOptions;
    protected headers: Headers;
    constructor(http: Http);
    GetChartData(profile: string, chart: string): Observable<ChartDataVm>;
    _serverError(err: any): Observable<any>;
    GetProfile(profile: string): Observable<any>;
    GetProfileStructure(): Observable<any>;
    AddProfileStructure(newProfile: ProfileStructureVm): Observable<ProfileStructureVm[]>;
    deleteProfileStructure(title: string): Observable<ProfileStructureVm[]>;
    GetEntities(): Observable<any>;
    GetConnections(entity: string[]): Observable<any>;
    loadProfile(profile: string): void;
    replaceChartData(data: ChartData[]): void;
    InitAutoRefresh(groups: string): void;
}
