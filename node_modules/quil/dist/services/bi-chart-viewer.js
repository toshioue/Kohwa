import { Injectable } from '@angular/core';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { Observable } from "rxjs/Observable";
import { Http, Response, Headers, RequestOptions } from "@angular/http";
import * as go from 'gojs';
import { Connection } from '../components/index';
var BIService = /** @class */ (function () {
    // url = 'http://50.97.89.9:66/api/';
    function BIService(http) {
        this.http = http;
        this.diagram = new go.Diagram();
        this.group = "";
        this.chartDatas = [];
        this.headers = new Headers;
        this.headers.append('Content-Type', 'application/json');
        // this.headers.append('Access-Control-Allow-Origin', '*');
        // this.headers.append("Access-Control-Allow-Headers", "X-Requested-With");
        this.options = new RequestOptions({
            headers: this.headers
        });
    }
    BIService.prototype.GetChartData = function (profile, chart) {
        return this.http.get(this.url + "render/GetChartData/" + profile + "/" + chart)
            .map(function (response) {
            return response.json();
        })
            .catch(this._serverError);
    };
    BIService.prototype._serverError = function (err) {
        console.log('server error:', err); // debug
        if (err instanceof Response) {
            return Observable.throw(err.json().error || 'backend server error');
        }
        return Observable.throw(err || 'backend server error');
    };
    BIService.prototype.GetProfile = function (profile) {
        var url = this.url + 'render/GetProfile/' + profile;
        console.log(url);
        return this.http.get(url)
            .map(function (response) {
            return response.json();
        })
            .catch(this._serverError);
    };
    BIService.prototype.GetProfileStructure = function () {
        var url = this.url + 'Profile';
        console.log(url);
        return this.http.get(url)
            .map(function (response) {
            return response.json();
        })
            .catch(this._serverError);
    };
    BIService.prototype.AddProfileStructure = function (newProfile) {
        var url = this.url + 'Profile';
        var toAdd = JSON.stringify(newProfile);
        return this.http
            .post(url, toAdd, { headers: this.headers })
            .map(function (response) { return response.json(); })
            .catch(this._serverError);
    };
    BIService.prototype.deleteProfileStructure = function (title) {
        var url = this.url + 'Profile/' + title;
        return this.http
            .post(url, { headers: this.options.headers })
            .map(function (response) { return response.json(); })
            .catch(this._serverError);
    };
    BIService.prototype.GetEntities = function () {
        var url = this.url + 'structure/getentities/';
        return this.http.get(url)
            .map(function (response) {
            return response.json();
        })
            .catch(this._serverError);
    };
    BIService.prototype.GetConnections = function (entity) {
        var url = this.url + 'structure/getconnections/';
        var EtoAdd = JSON.stringify(entity);
        return this.http
            .post(url, EtoAdd, { headers: this.options.headers })
            .map(function (response) {
            return response.json();
        })
            .catch(this._serverError);
    };
    BIService.prototype.loadProfile = function (profile) {
        var _this = this;
        this.GetProfile(profile).subscribe((function (p) {
            if (p) {
                _this.group = "";
                _this.profileBands = p.bands;
                _this.profileTitle = p.title;
                p.entities.forEach(function (element) {
                    _this.group += "/" + element;
                });
                if (_this.wsUrl) {
                    _this.InitAutoRefresh(_this.group);
                }
            }
        }));
        this.profileBands = null;
        this.profileTitle = null;
    };
    BIService.prototype.replaceChartData = function (data) {
        var _this = this;
        data.forEach(function (d) {
            _this.chartDatas.forEach(function (bd) {
                var i = 0;
                bd.band.dimensions.forEach(function (cd) {
                    if (cd.caption == d.caption) {
                        bd.band.dimensions.splice(i, 1, (d));
                    }
                    i++;
                });
            });
        });
    };
    BIService.prototype.InitAutoRefresh = function (groups) {
        var _this = this;
        this.connection = new Connection(this.wsUrl + groups); //'ws://localhost:54764/quil/[a@y.com]'
        this.connection.clientMethods["refreshChart"] = function (message) {
            _this.replaceChartData(message.dimensions);
        };
        this.connection.start();
    };
    BIService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BIService.ctorParameters = function () { return [
        { type: Http, },
    ]; };
    return BIService;
}());
export { BIService };
//# sourceMappingURL=bi-chart-viewer.js.map